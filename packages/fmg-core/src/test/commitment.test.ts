import { Channel, } from '../channel';
import { Commitment, CommitmentType, toHex, fromHex, mover } from '../commitment';

import { BigNumber } from 'ethers/utils';
import { Uint32 } from '../types';
import { Wallet } from 'ethers';

describe('Commitment', () => {

  const nonce = 12;
  const turnNum: Uint32 = 15;

  const channelType = new Wallet('4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d')
    .address;
  // private keys are from the accounts generated by `ganache-cli -d`
  const participantA = new Wallet(
    '6cbed15c793ce57650b9877cf6fa156fbef513c4e6134f022a85b1ffdd59b2a1',
  );
  const participantB = new Wallet(
    '6370fd033278c143179d81c5526140625662b8daa446c22ee2d73db3707e620c',
  );
  const participants = [participantA.address, participantB.address];
  const allocation = [new BigNumber(5).toHexString(), new BigNumber(4).toHexString()];

  const destination = [participantA.address, participantB.address];
  const channel: Channel = { channelType, nonce, participants };
  const commitmentType = CommitmentType.PreFundSetup;
  const commitment: Commitment = {
    channel,
    commitmentType,
    turnNum,
    allocation,
    destination,
    commitmentCount: 0,
    appAttributes: '0x',
  };

  it('can encode and decode a Commitment', () => {
    const hexValue = toHex(commitment);
    const decodedCommitment = fromHex(hexValue);
    expect(decodedCommitment).toEqual(commitment);
  });

  it('can identify the mover of a commitment', () => {
    expect(mover(commitment)).toEqual(participantB.address);
  });
});
